// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cloud/cloud.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	efs "github.com/aws/aws-sdk-go-v2/service/efs"
	gomock "github.com/golang/mock/gomock"
)

// MockEfs is a mock of Efs interface.
type MockEfs struct {
	ctrl     *gomock.Controller
	recorder *MockEfsMockRecorder
}

// MockEfsMockRecorder is the mock recorder for MockEfs.
type MockEfsMockRecorder struct {
	mock *MockEfs
}

// NewMockEfs creates a new mock instance.
func NewMockEfs(ctrl *gomock.Controller) *MockEfs {
	mock := &MockEfs{ctrl: ctrl}
	mock.recorder = &MockEfsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEfs) EXPECT() *MockEfsMockRecorder {
	return m.recorder
}

// CreateAccessPoint mocks base method.
func (m *MockEfs) CreateAccessPoint(arg0 context.Context, arg1 *efs.CreateAccessPointInput, arg2 ...func(*efs.Options)) (*efs.CreateAccessPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessPoint", varargs...)
	ret0, _ := ret[0].(*efs.CreateAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPoint indicates an expected call of CreateAccessPoint.
func (mr *MockEfsMockRecorder) CreateAccessPoint(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPoint", reflect.TypeOf((*MockEfs)(nil).CreateAccessPoint), varargs...)
}

// DeleteAccessPoint mocks base method.
func (m *MockEfs) DeleteAccessPoint(arg0 context.Context, arg1 *efs.DeleteAccessPointInput, arg2 ...func(*efs.Options)) (*efs.DeleteAccessPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessPoint", varargs...)
	ret0, _ := ret[0].(*efs.DeleteAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPoint indicates an expected call of DeleteAccessPoint.
func (mr *MockEfsMockRecorder) DeleteAccessPoint(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPoint", reflect.TypeOf((*MockEfs)(nil).DeleteAccessPoint), varargs...)
}

// DescribeAccessPoints mocks base method.
func (m *MockEfs) DescribeAccessPoints(arg0 context.Context, arg1 *efs.DescribeAccessPointsInput, arg2 ...func(*efs.Options)) (*efs.DescribeAccessPointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccessPoints", varargs...)
	ret0, _ := ret[0].(*efs.DescribeAccessPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccessPoints indicates an expected call of DescribeAccessPoints.
func (mr *MockEfsMockRecorder) DescribeAccessPoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessPoints", reflect.TypeOf((*MockEfs)(nil).DescribeAccessPoints), varargs...)
}

// DescribeFileSystems mocks base method.
func (m *MockEfs) DescribeFileSystems(arg0 context.Context, arg1 *efs.DescribeFileSystemsInput, arg2 ...func(*efs.Options)) (*efs.DescribeFileSystemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileSystems", varargs...)
	ret0, _ := ret[0].(*efs.DescribeFileSystemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystems indicates an expected call of DescribeFileSystems.
func (mr *MockEfsMockRecorder) DescribeFileSystems(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystems", reflect.TypeOf((*MockEfs)(nil).DescribeFileSystems), varargs...)
}

// DescribeMountTargets mocks base method.
func (m *MockEfs) DescribeMountTargets(arg0 context.Context, arg1 *efs.DescribeMountTargetsInput, arg2 ...func(*efs.Options)) (*efs.DescribeMountTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMountTargets", varargs...)
	ret0, _ := ret[0].(*efs.DescribeMountTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMountTargets indicates an expected call of DescribeMountTargets.
func (mr *MockEfsMockRecorder) DescribeMountTargets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMountTargets", reflect.TypeOf((*MockEfs)(nil).DescribeMountTargets), varargs...)
}