// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cloud/cloud_interface.go

// Package cloud is a generated GoMock package.
package cloud

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCloud is a mock of Cloud interface.
type MockCloud struct {
	ctrl     *gomock.Controller
	recorder *MockCloudMockRecorder
}

// MockCloudMockRecorder is the mock recorder for MockCloud.
type MockCloudMockRecorder struct {
	mock *MockCloud
}

// NewMockCloud creates a new mock instance.
func NewMockCloud(ctrl *gomock.Controller) *MockCloud {
	mock := &MockCloud{ctrl: ctrl}
	mock.recorder = &MockCloudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloud) EXPECT() *MockCloudMockRecorder {
	return m.recorder
}

// CreateAccessPoint mocks base method.
func (m *MockCloud) CreateAccessPoint(ctx context.Context, volumeName string, accessPointOpts *AccessPointOptions) (*AccessPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPoint", ctx, volumeName, accessPointOpts)
	ret0, _ := ret[0].(*AccessPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPoint indicates an expected call of CreateAccessPoint.
func (mr *MockCloudMockRecorder) CreateAccessPoint(ctx, volumeName, accessPointOpts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPoint", reflect.TypeOf((*MockCloud)(nil).CreateAccessPoint), ctx, volumeName, accessPointOpts)
}

// DeleteAccessPoint mocks base method.
func (m *MockCloud) DeleteAccessPoint(ctx context.Context, accessPointId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPoint", ctx, accessPointId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessPoint indicates an expected call of DeleteAccessPoint.
func (mr *MockCloudMockRecorder) DeleteAccessPoint(ctx, accessPointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPoint", reflect.TypeOf((*MockCloud)(nil).DeleteAccessPoint), ctx, accessPointId)
}

// DescribeAccessPoint mocks base method.
func (m *MockCloud) DescribeAccessPoint(ctx context.Context, accessPointId string) (*AccessPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccessPoint", ctx, accessPointId)
	ret0, _ := ret[0].(*AccessPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccessPoint indicates an expected call of DescribeAccessPoint.
func (mr *MockCloudMockRecorder) DescribeAccessPoint(ctx, accessPointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessPoint", reflect.TypeOf((*MockCloud)(nil).DescribeAccessPoint), ctx, accessPointId)
}

// DescribeFileSystem mocks base method.
func (m *MockCloud) DescribeFileSystem(ctx context.Context, fileSystemId string) (*FileSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystem", ctx, fileSystemId)
	ret0, _ := ret[0].(*FileSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystem indicates an expected call of DescribeFileSystem.
func (mr *MockCloudMockRecorder) DescribeFileSystem(ctx, fileSystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystem", reflect.TypeOf((*MockCloud)(nil).DescribeFileSystem), ctx, fileSystemId)
}

// DescribeMountTargets mocks base method.
func (m *MockCloud) DescribeMountTargets(ctx context.Context, fileSystemId, az string) (*MountTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMountTargets", ctx, fileSystemId, az)
	ret0, _ := ret[0].(*MountTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMountTargets indicates an expected call of DescribeMountTargets.
func (mr *MockCloudMockRecorder) DescribeMountTargets(ctx, fileSystemId, az interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMountTargets", reflect.TypeOf((*MockCloud)(nil).DescribeMountTargets), ctx, fileSystemId, az)
}

// GetMetadata mocks base method.
func (m *MockCloud) GetMetadata() MetadataService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(MetadataService)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockCloudMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockCloud)(nil).GetMetadata))
}
