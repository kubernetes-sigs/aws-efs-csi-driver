// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubernetes-sigs/aws-efs-csi-driver/pkg/cloud (interfaces: Cloud)

// Package mock_cloud is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cloud "github.com/kubernetes-sigs/aws-efs-csi-driver/pkg/cloud"
)

// MockCloud is a mock of Cloud interface
type MockCloud struct {
	ctrl     *gomock.Controller
	recorder *MockCloudMockRecorder
}

// MockCloudMockRecorder is the mock recorder for MockCloud
type MockCloudMockRecorder struct {
	mock *MockCloud
}

// NewMockCloud creates a new mock instance
func NewMockCloud(ctrl *gomock.Controller) *MockCloud {
	mock := &MockCloud{ctrl: ctrl}
	mock.recorder = &MockCloudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloud) EXPECT() *MockCloudMockRecorder {
	return m.recorder
}

// CreateAccessPoint mocks base method
func (m *MockCloud) CreateAccessPoint(ctx context.Context, volumeName string, accessPointOpts *cloud.AccessPointOptions) (*cloud.AccessPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPoint", ctx, volumeName, accessPointOpts)
	ret0, _ := ret[0].(*cloud.AccessPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPoint indicates an expected call of CreateAccessPoint
func (mr *MockCloudMockRecorder) CreateAccessPoint(ctx, volumeName, accessPointOpts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPoint", reflect.TypeOf((*MockCloud)(nil).CreateAccessPoint), ctx, volumeName, accessPointOpts)
}

// DeleteAccessPoint mocks base method
func (m *MockCloud) DeleteAccessPoint(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPoint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessPoint indicates an expected call of DeleteAccessPoint
func (mr *MockCloudMockRecorder) DeleteAccessPoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPoint", reflect.TypeOf((*MockCloud)(nil).DeleteAccessPoint), arg0, arg1)
}

// DescribeAccessPoint mocks base method
func (m *MockCloud) DescribeAccessPoint(arg0 context.Context, arg1 string) (*cloud.AccessPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccessPoint", arg0, arg1)
	ret0, _ := ret[0].(*cloud.AccessPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccessPoint indicates an expected call of DescribeAccessPoint
func (mr *MockCloudMockRecorder) DescribeAccessPoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessPoint", reflect.TypeOf((*MockCloud)(nil).DescribeAccessPoint), arg0, arg1)
}

// DescribeFileSystem mocks base method
func (m *MockCloud) DescribeFileSystem(arg0 context.Context, arg1 string) (*cloud.FileSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystem", arg0, arg1)
	ret0, _ := ret[0].(*cloud.FileSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystem indicates an expected call of DescribeFileSystem
func (mr *MockCloudMockRecorder) DescribeFileSystem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystem", reflect.TypeOf((*MockCloud)(nil).DescribeFileSystem), arg0, arg1)
}

// DescribeMountTargets mocks base method.
func (m *MockCloud) DescribeMountTargets(ctx context.Context, fileSystemId, az string) (*cloud.MountTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMountTargets", ctx, fileSystemId, az)
	ret0, _ := ret[0].(*cloud.MountTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMountTargets indicates an expected call of DescribeMountTargets.
func (mr *MockCloudMockRecorder) DescribeMountTargets(ctx, fileSystemId, az interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMountTargets", reflect.TypeOf((*MockCloud)(nil).DescribeMountTargets), ctx, fileSystemId, az)
}

// GetMetadata mocks base method
func (m *MockCloud) GetMetadata() cloud.MetadataService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(cloud.MetadataService)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockCloudMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockCloud)(nil).GetMetadata))
}
